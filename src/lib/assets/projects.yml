airwaves:
  name: Airwaves
  headline: A twist on classic vertical scrolling rhythm games, where you pinch your fingers to click the notes
  banner: /banners/airwaves.png
  description: |
    Airwaves is a browser-based rhythm game that turns your webcam into a motion controller. Inspired by the mechanics of traditional vertical-scrolling rhythm games, it introduces a fresh physical dimension by mapping each of the four keys to a pinch gesture with your fingers. Using real-time hand tracking powered by TensorFlow.js, the game detects when players pinch their fingers together and triggers notes in time with the beat. Built entirely with React and Three.js, Airwaves runs smoothly on any device with a webcam, eliminating the need for external hardware or software installations.
    The original concept for Airwaves emerged during Bitcamp 2025, a collegiate hackathon where the challenge was to develop a novel, interactive application within 36 hours. The goal was simple: create something fun, accessible, and visually engaging that pushed the boundaries of web-based interactivity. The team rapidly prototyped the core game mechanics using React for the UI, Three.js for the game’s 3D note-scrolling visuals, and TensorFlow.js for hand detection. Despite the tight timeline, Airwaves quickly became one of the more talked-about projects at the event for its unique approach to rhythm gaming.
    A standout moment for the project came during final presentations when Airwaves was pitched not just as a game, but as a potential physical therapy tool. The idea of using precise, repetitive hand motions to aid motor control and rehabilitation caught the attention of judges, earning it the "Best Gamification Hack" award track at the event. This pivot from pure entertainment to a health-oriented application added an unexpected layer of purpose to the project and opened doors for future iterations aimed at accessibility and wellness.
    In its current form, Airwaves remains a prototype, but its potential is significant. The team plans to refine the gesture detection model, enhance the visual experience, and expand gameplay modes to include difficulty scaling, multiplayer challenges, and mod support. There’s also interest in integrating a beatmap editor and support for alternative input gestures, further lowering the barrier for entry and offering customization options for players of all abilities.

bingo:
  name: osu!Bingo
  headline: An osu! minigame where teams of players compete to try and fill in any line on a bingo board.
  banner: /banners/bingo.png
  description: |
    osu!Bingo was a community-driven experiment to bring the chaotic, competitive energy of Trackmania Bingo to the osu! community. The premise is simple but brilliant: players are divided into teams, and each team attempts to claim squares on a bingo card by full-comboing specific maps. Squares can be reclaimed by the opposing team if they achieve a higher score FC on that same map. The goal? Be the first to claim five squares in a row, column, or diagonal, much like a traditional game of bingo. The idea sparked immediate interest among casual and competitive players alike for its potential as a fast-paced, chaotic tournament format.
    The technical structure of osu!Bingo was built with flexibility at its core. The backend utilized a JSON-configured template system that allowed hosts to fully customize game rules, map selections, win conditions, and mid-game events without code changes. A GraphQL-like options system managed everything from mod multipliers to claim and reclaim conditions. The game logic was designed to allow dynamic rule changes mid-game, such as raising the score threshold needed to claim a square or triggering sudden-death tiebreakers. Time-based events kept lobbies moving quickly and prevented stalemates, a lesson learned from other competitive osu! formats.
    One of the most unique aspects of osu!Bingo was its “events” system. Similar to battle royale modifiers or MOBA map events, hosts could schedule game-altering rule changes in real-time. For example, a sudden rule might adjust the minimum score for claiming a square, or shift reclaim rules from score-based to accuracy-based mid-match. The backend was built to accommodate a variety of final game states, including sudden-death tiebreakers on unlisted maps, randomized modifiers, or even full draws when no victory could be fairly determined. Planned future features like “Silly Squares”—challenge squares with unique claim conditions—promised to keep matches fresh and unpredictable.
    The biggest challenge faced during development was finding a balance between flexibility and control. While the customization potential was exciting, it risked making the game unwieldy for casual hosts. To address this, a default ruleset and user-friendly templates were developed alongside the advanced configuration options. Gameplay pacing was also a major design consideration, with ideas like Bedwars-style speedup events implemented to keep matches engaging and under an hour.
    Though still in development, osu!Bingo’s concept was well-received by early testers and osu! event organizers. A tournament featuring the system was planned as a future publicity event to help showcase its potential to a wider audience. Its modular, event-driven architecture made it a standout project in terms of technical flexibility and multiplayer game design, and it remains one of the more innovative ideas in the osu! community's competitive scene.

yagami:
  name: Yagami
  headline: A bot built to assist in the referee role in osu! tournaments
  banner: /banners/yagami.png
  description: |
    Yagami was an ambitious tool designed to automatically referee competitive osu! matches, tailored specifically for “blitz” style tournaments where dozens of matches need to run concurrently. The idea originated from frustrations in manually managing matches and referees in fast-paced community tournaments, and the goal was to provide hosts and players with a streamlined way to spin up scrims or fully customized matches without friction. Yagami aimed to give users control over mappool selections, match configurations, and scrim setups, features absent from alternatives like Elitebotix and o!mm. The excitement around the concept quickly drew attention from multiple developers and tournament organizers, resulting in a vibrant early development period.
    The tech stack supporting Yagami included a GraphQL API for querying and managing tournament data, a WebSocket API for live match updates, and a Discord bot for tournament management utilities. Additional tools like Twitch bots and web overlays were planned to enhance streaming experiences and spectator engagement. Yagami’s API-centric architecture was chosen to ensure modularity and future extensibility, with each client—whether bot, overlay, or web interface—communicating through well-defined endpoints. Despite some limitations in the initial public-facing infrastructure, Yagami made significant strides towards its goal of being a lightweight, highly configurable referee system.
    Unique features in Yagami included support for custom mod multipliers, ABBA ban patterns, dynamic scrim creation directly from osu! chat, and live tournament overlays fed by WebSocket streams. A major challenge lay in scope creep, with frequent feature requests and speculative add-ons threatening to derail progress on the core vision. To combat this, the team committed to a clear vision statement and a phased development plan, ensuring that only essential features made it into each release milestone. Technical hurdles also emerged with non-containerized legacy systems, broken APIs, and incomplete referee code—all of which had to be restructured as part of ongoing renovations.
    Despite these challenges, Yagami’s tournament performances proved remarkably smooth. The tool successfully powered two blitz tournaments, showcasing its practical viability in a live competitive environment. Players and organizers alike appreciated the ease of scrim creation and real-time match management. Its tournament overlays and Twitch integrations, while still in progress, hinted at the broader potential for this system in the esports streaming space. Ultimately, Yagami was sunsetted due to developer burnout and the ongoing battle with feature bloat—but community interest in seeing the project completed or revived remained high, with many expressing enthusiasm about its possibilities.

rankdle:
  name: osu! Rankdle
  headline: An osu! rank-guessing game inspired by Rankdle and Geoguessr
  banner: /banners/rankdle.png
  description: |
    osu!Rankdle was a passion project born out of a simple, playful idea: what if players could guess the rank of a gameplay replay based solely on watching it? Inspired by popular guessing games like rankdle.com, the site initially launched with just a handful of videos. It followed a daily format to encourage regular engagement, and within hours of its first Reddit post announcement, it exploded in popularity. Thousands of players rushed to the site, immediately testing its infrastructure and surfacing bugs. Despite the rough spike in demand, the platform held up remarkably well, and its initial reception was overwhelmingly positive.
    Technically, osu!Rankdle was built on a lightweight web stack backed by a Turso database, though an early goal was to migrate to Drizzle ORM to optimize database read operations. The site featured an in-browser video player, a guessing interface, and a simple authentication system. As the community grew, additional backend services and moderation tools were introduced. Planned updates included an in-browser .osr replay viewer, voting-based moderation to replace the underused report system, and cross-playlist support to expand beyond standard osu! gamemodes into taiko, mania, and catch.
    Among its unique features were its playful leaderboard system, sharable results, and eventually a planned “Versus” mode, taking cues from games like GeoGuessr for competitive head-to-head play. Handling account merging for anonymous and logged-in players also presented technical hurdles, as did improving UX for features like the video gallery, guess history overlays, and mobile vs. desktop interfaces. The team balanced new feature ideas against the constant risk of scope creep, choosing to carefully version and phase updates to preserve long-term sustainability.
    While the site’s viral moment eventually cooled off, osu!Rankdle remained active, continuing to attract a dedicated, if quieter, player base. Its unexpected rise and resilient infrastructure during peak traffic became one of its proudest technical achievements. Though no longer as bustling as its launch week, the site persists as a fun curiosity in the osu! community, and its ongoing development roadmap ensures it remains playable and relevant for those still eager to test their rank-guessing intuition.

chartiverse:
  name: Chartiverse
  headline: A sharing, community, and preview site for clone hero charters.
  banner: /banners/chartiverse.png
  description: |
    Chartiverse was born out of frustration with the existing landscape of Clone Hero chart sharing platforms. At the time, most available services were barebones, offering little more than file listings with no previews or media integration. As a frequent player and chart creator, I wanted a platform that felt modern and intuitive—one that showcased songs with album art, offered audio previews, and, most importantly, allowed players to watch a playable visualization of a chart before downloading it. With that goal in mind, I set out to build my own solution.
    This project marked my first real foray into working with HTML canvases, which quickly became a core part of the application. The canvas system allowed me to render note charts in real time, replicating the vertical scrolling, note-hit animation style of Clone Hero directly in the browser. Combined with an integrated audio preview player, users could listen to a snippet of a song and watch its note mapping in action before deciding whether to download. This transformed the experience from blind file trading into something far more interactive and user-friendly.
    One of the major technical challenges was developing a system to handle chart uploads cleanly. Each Clone Hero chart is packaged as a zip containing the audio file, album art, and note chart files in various formats. I built a system that parses these zip files on upload, extracts relevant metadata, and generates a clean listing page with all associated media assets displayed. Album art is pulled directly from the uploaded files, ensuring listings feel polished and complete, while the chart’s note mapping is rendered dynamically in the preview window.
    What set Chartiverse apart wasn’t just the visual presentation, but the usability improvements it introduced to an overlooked niche. Adding real-time video previews of charts in the browser was something no other service had offered at the time, and it quickly became the feature that users mentioned most in feedback. The system also laid groundwork for future ideas like difficulty filtering, genre tagging, and eventually even a collaborative chart rating system.
    While still a personal side project, Chartiverse gave me valuable experience in building real-time canvas-based applications, integrating multimedia uploads, and creating seamless end-to-end user flows for content platforms. It remains one of my favorite projects for how it turned a niche annoyance into a genuinely better user experience for a small but passionate community.

cdc:
  name: CLXXIII's Draft Cup
  headline: A full-scale osu! tournament with custom graphics, spreadsheets, and a custom website
  banner: /banners/cdc.png
  description: |
    CLXXIII’s Draft Cup was my first foray into organizing a large-scale community tournament for osu!, specifically designed to welcome beginner tournament players. The goal was to create a casual-competitive environment where newer players could experience the excitement of organized play without the pressure of high-tier competition. The tournament format was built around a draft system, adding an extra layer of strategy and unpredictability to team compositions while keeping matches balanced and engaging for everyone involved.
    The event kicked off with a qualifier stage, where 128 players competed individually and were ranked based on their performances. From there, players were split into four distinct skill tiers. The top players in Tier 1 became team captains, each responsible for drafting one player from each remaining tier to build their four-person team. The tournament then progressed into a round-of-32 double elimination bracket, ensuring every team had multiple opportunities to play and improve regardless of their initial placement.
    Behind the scenes, I led a team of roughly 15 volunteers covering roles like refereeing, stream commentary, match scheduling, and player support. In addition to overall management, I personally handled tournament logistics—designing and managing all spreadsheets for scheduling and seeding, creating the tournament’s stream graphics and overlay assets, contributing to mappool selection, and even developing a dedicated website for player signups and match information. The site provided a central hub for participants and spectators alike, making it easy to access brackets, player profiles, and match schedules.
    Organizing the Draft Cup was as stressful as it was rewarding. Balancing coordination across referees, players, streamers, and bracket admins while keeping the tournament on schedule presented countless small challenges. Last-minute player dropouts, bracket delays, and stream mishaps were all part of the learning curve. Yet through solid teamwork and careful planning, the event ran smoothly and concluded with overwhelmingly positive feedback from both players and viewers.
    Ultimately, CLXXIII’s Draft Cup was a success—not just for its solid competitive play, but for the sense of community it fostered. It gave newer osu! players a chance to compete on stream, make new friends, and experience the thrill of a structured event. It also deepened my experience in event management, live production workflows, web tooling for community events, and fast-paced problem-solving under pressure. It’s a project I’m proud to have delivered, and one I hope to revisit in new forms down the line.
